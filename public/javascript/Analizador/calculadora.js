/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var calculadora = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[2,13],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[10,16,24,25,26,27,28,29],$V9=[5,16,24,25,26,27,28,29],$Va=[16,24,25,26,27,28,29],$Vb=[1,46],$Vc=[1,38],$Vd=[1,51],$Ve=[1,53],$Vf=[1,52],$Vg=[1,41],$Vh=[1,42],$Vi=[1,43],$Vj=[1,45],$Vk=[1,47],$Vl=[1,48],$Vm=[1,49],$Vn=[1,50],$Vo=[11,17,20,24,25,26,27,28,29,95,96,97,98,99],$Vp=[11,17,24,25,26,27,28,29,95,96,97,98,99],$Vq=[17,65],$Vr=[12,39,45],$Vs=[2,41],$Vt=[1,73],$Vu=[12,79],$Vv=[1,75],$Vw=[1,82],$Vx=[2,114],$Vy=[1,87],$Vz=[1,99],$VA=[1,94],$VB=[1,92],$VC=[1,95],$VD=[1,96],$VE=[1,104],$VF=[1,102],$VG=[1,90],$VH=[1,93],$VI=[1,91],$VJ=[1,97],$VK=[1,98],$VL=[1,100],$VM=[1,101],$VN=[1,106],$VO=[43,45],$VP=[12,39,43,45,65],$VQ=[1,120],$VR=[1,121],$VS=[1,122],$VT=[1,123],$VU=[1,124],$VV=[1,125],$VW=[1,126],$VX=[1,127],$VY=[1,128],$VZ=[1,129],$V_=[1,130],$V$=[1,131],$V01=[1,132],$V11=[1,133],$V21=[1,134],$V31=[12,43,45,66,79,101,102,103,104,105,106,107,108,109,110,111,112,113,115,122],$V41=[1,143],$V51=[1,144],$V61=[12,39,45,79],$V71=[12,43,45,66,79,110,111,112,113,115,122],$V81=[12,43,45,66,79,110,111,122],$V91=[1,176],$Va1=[1,185],$Vb1=[1,207],$Vc1=[1,214],$Vd1=[1,219],$Ve1=[1,217],$Vf1=[1,218],$Vg1=[1,216],$Vh1=[1,215],$Vi1=[1,211],$Vj1=[1,212],$Vk1=[1,213],$Vl1=[1,210],$Vm1=[1,208],$Vn1=[1,209],$Vo1=[12,43,45,66,79,101,102,103,110,111,112,113,115,122],$Vp1=[1,227],$Vq1=[1,229],$Vr1=[12,39,43,45,62,66,79,101,102,103,104,105,106,107,108,109,110,111,112,113,115,122],$Vs1=[11,17,18,20,67,68,69,70,71,74,78,80,81,82,85,89,90,95,96,97,98,99],$Vt1=[1,246],$Vu1=[12,39,43,45,65,66,79,101,102,103,104,105,106,107,108,109,110,111,112,113,115,122],$Vv1=[1,304],$Vw1=[1,320],$Vx1=[20,78,80],$Vy1=[1,347],$Vz1=[11,17,18,20,67,68,69,70,71,74,78,80,81,82,85,88,89,90,95,96,97,98,99];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"e":4,"EOF":5,"sentencias_globales":6,"declaraciones_import":7,"sentencias_generales":8,"declaracion_import":9,"IMPORT":10,"STRING":11,";":12,"declaraciones_clase":13,"declaracion_clase":14,"modificadores_clase":15,"CLASS":16,"ID":17,"{":18,"cuerpo_clase":19,"}":20,"EXTENDS":21,"modificadores_clase2":22,"modificador_clase":23,"PUBLIC":24,"PROTECTED":25,"PRIVATE":26,"ABSTRACT":27,"STATIC":28,"FINAL":29,"cuerpo_clase_sentencias":30,"modificadores":31,"declaracion_metodos":32,"declaracion_variables":33,"declaracion_arreglos":34,"sentencia_arreglo":35,"variables":36,"tipo":37,"lista_id":38,"=":39,"exp":40,"NEW":41,"(":42,")":43,"lista_valores":44,",":45,"lista_parametros":46,"cuerpo_metodo":47,"sentencias_metodo":48,"sentencia_asignacion_arreglo":49,"sentencia_imprimir":50,"sentencia_if":51,"sentencia_switch":52,"sentencia_while":53,"sentencia_for":54,"sentencia_dowhile":55,"sentencia_asignacion":56,"sentencia_break":57,"sentencia_incre_decre":58,"sentencia_llamada":59,"sentencia_retorno":60,"sentencia_objetos":61,".":62,"lista_dd":63,"lista_d":64,"[":65,"]":66,"RETORNO":67,"--":68,"++":69,"BREAK":70,"THIS":71,"elementos_this":72,"elemento_this":73,"SWITCH":74,"listas_cases":75,"case_default":76,"lista_case":77,"CASE":78,":":79,"DEFAULT":80,"WHILE":81,"FOR":82,"for_inicio":83,"DO":84,"IF":85,"sentencia_elseif":86,"sentencia_else":87,"ELSE":88,"PRINT":89,"PRINTLN":90,"parametros":91,"parametro":92,"modificador":93,"visibilidad":94,"INT":95,"DOUBLE":96,"CHAR":97,"BOOLEAN":98,"VOID":99,"!":100,"&&":101,"||":102,"^":103,">":104,"<":105,">=":106,"<=":107,"==":108,"!=":109,"+":110,"-":111,"*":112,"/":113,"POW":114,"%":115,"NUMBER":116,"DECIMAL":117,"FALSE":118,"TRUE":119,"sentencia_ternario":120,"NULO":121,"?":122,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"IMPORT",11:"STRING",12:";",16:"CLASS",17:"ID",18:"{",20:"}",21:"EXTENDS",24:"PUBLIC",25:"PROTECTED",26:"PRIVATE",27:"ABSTRACT",28:"STATIC",29:"FINAL",39:"=",41:"NEW",42:"(",43:")",45:",",62:".",65:"[",66:"]",67:"RETORNO",68:"--",69:"++",70:"BREAK",71:"THIS",74:"SWITCH",78:"CASE",79:":",80:"DEFAULT",81:"WHILE",82:"FOR",84:"DO",85:"IF",88:"ELSE",89:"PRINT",90:"PRINTLN",95:"INT",96:"DOUBLE",97:"CHAR",98:"BOOLEAN",99:"VOID",100:"!",101:"&&",102:"||",103:"^",104:">",105:"<",106:">=",107:"<=",108:"==",109:"!=",110:"+",111:"-",112:"*",113:"/",114:"POW",115:"%",116:"NUMBER",117:"DECIMAL",118:"FALSE",119:"TRUE",121:"NULO",122:"?"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,2],[7,1],[9,3],[8,1],[13,2],[13,1],[14,6],[14,8],[15,0],[15,1],[22,2],[22,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[19,2],[19,1],[30,2],[30,1],[30,1],[30,1],[34,3],[34,2],[33,3],[33,2],[36,2],[36,2],[36,4],[36,7],[36,8],[44,3],[44,1],[38,3],[38,1],[32,8],[32,6],[32,6],[32,8],[32,7],[47,2],[47,1],[48,2],[48,2],[48,2],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,2],[48,2],[48,1],[48,2],[48,2],[48,2],[61,3],[61,5],[49,4],[35,3],[35,3],[35,7],[35,5],[35,7],[35,5],[64,3],[64,2],[63,4],[63,3],[60,2],[60,1],[59,3],[59,4],[58,3],[58,3],[58,3],[58,3],[57,1],[56,3],[56,5],[72,3],[72,1],[73,1],[73,4],[73,3],[52,8],[52,7],[75,2],[75,1],[77,4],[76,3],[53,7],[54,11],[54,9],[83,1],[83,1],[55,9],[51,9],[51,8],[51,8],[51,7],[87,4],[86,9],[86,8],[50,5],[50,5],[46,0],[46,1],[91,3],[91,1],[92,2],[92,2],[92,3],[92,3],[31,2],[31,1],[93,1],[93,1],[93,1],[93,1],[94,1],[94,1],[94,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[40,2],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,6],[40,3],[40,3],[40,2],[40,2],[40,2],[40,2],[40,2],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,3],[40,1],[40,1],[40,2],[40,3],[40,3],[120,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 4: case 8: case 14: case 27: case 102: case 103: case 115: case 127: case 166: case 168:
this.$=$$[$0];
break;
case 3:

                                                            this.$=$$[$0-1];
                                                            for(var i=0;i<$$[$0].length;i++){
                                                                this.$.push($$[$0][i]);
                                                            }
                                                            
break;
case 5:

                                                                this.$=$$[$0-1];
                                                                this.$.push($$[$0]);
                                                                
break;
case 6: case 10: case 16: case 60:

                                        this.$=[];
                                        this.$.push($$[$0]);
                                        
break;
case 7:
this.$=new Importacion($$[$0-1].replace("\"",""));
break;
case 9: case 15:

                                                            this.$=$$[$0-1];
                                                            this.$.push($$[$0]);
                                                            
break;
case 11:

                                                                    this.$=new Declaracionclase($$[$0-3],$$[$0-5],"",$$[$0-1]);
                                                                    
break;
case 12:

                                                                                this.$=new Declaracionclase($$[$0-5],$$[$0-7],$$[$0-3],$$[$0-1]);
                                                                                
break;
case 13: case 114:
this.$=[];
break;
case 17: case 128:
this.$=Visibilidad.PUBLIC;
break;
case 18: case 130:
this.$=Visibilidad.PROTECTED;
break;
case 19: case 129:
this.$=Visibilidad.PRIVATE;
break;
case 20: case 124:
this.$=Visibilidad.ABSTRACT;
break;
case 21: case 125:
this.$=Visibilidad.STATIC;
break;
case 22: case 126:
this.$=Visibilidad.FINAL;
break;
case 23:

                                                this.$=$$[$0-1];
                                                for(var i=0;i<$$[$0].length;i++){
                                                    this.$.push($$[$0][i]);
                                                }
                                                
break;
case 24:

                                    this.$=$$[$0];
                                    
break;
case 25:

                                                            this.$=[];
                                                            $$[$0].modificadores=$$[$0-1];
                                                            this.$.push($$[$0]);
                                                        
break;
case 26:

                            this.$=[];
                            this.$.push($$[$0]);
                        
break;
case 28:

                                                this.$=[];
                                                this.$.push($$[$0]);
                                            
break;
case 29:

                                                            this.$=$$[$0-1];
                                                            this.$.modificadores=$$[$0-2];
                                                        
break;
case 30:

                                            this.$=$$[$0-1];
                                            
break;
case 31:

                                                for(var i=0;i<$$[$0-1].length;i++){
                                                    $$[$0-1][i].modificadores=$$[$0-2];
                                                }
                                                this.$=$$[$0-1];
                                              
break;
case 32:

                                this.$=$$[$0-1];
                               
break;
case 33:

                                //DECLARACION DE UNA VARIABLE
                                for(var i=0;i<$$[$0].length;i++){
                                    $$[$0][i].tipo=$$[$0-1];
                                }
                                this.$=$$[$0];
                            
break;
case 34:

                            //DECLARACION DE UN OBJETO
                            for(var i=0;i<$$[$0].length;i++){
                                $$[$0][i].tipo=$$[$0-1];
                            }
                            this.$=$$[$0];
                            
break;
case 35:

                                    //DECLARACION ASIGNACION DE UNA VARIABLE
                                    for(var i=0;i<$$[$0-2].length;i++){
                                        $$[$0-2][i].tipo=$$[$0-3];
                                    }
                                    $$[$0-2][($$[$0-2].length-1)].iniValue=$$[$0];
                                    this.$=$$[$0-2];
                                    
break;
case 36:
 
                                            for(var i=0;i<$$[$0-5].length;i++){
                                                            $$[$0-5][i].tipo=$$[$0-6]; 
                                            }
                                            $$[$0-5][($$[$0-5].length-1)].iniValue=$$[$0-3];
                                            $$[$0-5][($$[$0-5].length-1)].lista_valores=[];
                                            $$[$0-5][($$[$0-5].length-1)].inicializado=true;
                                            this.$=$$[$0-5];
                                         
break;
case 37:
 
                                                        for(var i=0;i<$$[$0-6].length;i++){
                                                            $$[$0-6][i].tipo=$$[$0-7]; 
                                                        }
                                                        $$[$0-6][($$[$0-6].length-1)].iniValue=$$[$0-4];
                                                        $$[$0-6][($$[$0-6].length-1)].lista_valores=$$[$0-1];
                                                        $$[$0-6][($$[$0-6].length-1)].inicializado=true;
                                                        this.$=$$[$0-6];
                                                    
break;
case 38: case 116:

                                    this.$=$$[$0-2];
                                    this.$.push($$[$0]);
                                    
break;
case 39:

                    this.$=[];
                    this.$.push($$[$0]);
                
break;
case 40:

                        this.$=$$[$0-2];
                        this.$.push(new Declaracion(yytext,PrimitiveType.NULO,null,null,0,0,0));
                        
break;
case 41:

            this.$=[];
            this.$.push(new Declaracion(yytext,PrimitiveType.NULO,null,[],0,0,0));
            
break;
case 42:

                                                                            //UN METODO NORMAL
                                                                            this.$=new Metodo($$[$0-6],$$[$0-7],$$[$0-1],$$[$0-4]);
                                                                            
break;
case 43:

                                                        //UN METODO ABSTRACTO NORMAL
                                                        //id,tipo,nodos,parametros
                                                        this.$=new Metodo($$[$0-4],$$[$0-5],[],$$[$0-2]);
                                                        
break;
case 44:

                                                        //UN METODO ABSTRACTO QUE DEVUELVE UN OBJETO
                                                        this.$=new Metodo($$[$0-4],$$[$0-5],[],$$[$0-2]);
                                                        
break;
case 45:

                                                                            //METODO QUE DEVUELVE UN OBJETO
                                                                            this.$=new Metodo($$[$0-6],$$[$0-7],$$[$0-1],$$[$0-4]);
                                                                        
break;
case 46:

                                                                        //CONSTRUCTOR
                                                                        this.$=new Metodo($$[$0-6],"VOID",$$[$0-1],$$[$0-4]);
                                                                        this.$.constructor=true;
                                                                    
break;
case 47:

                                                this.$=$$[$0-1];
                                                for(var i=0;i<$$[$0].length;i++){
                                                    this.$.push($$[$0][i]);
                                                }
                                            
break;
case 48:

                                this.$=$$[$0];
                                
break;
case 49:
this.$=$$[$0-1];
break;
case 50:

                                    this.$=[];
                                    this.$.push($$[$0-1]);
                                    
break;
case 51:

                                                    this.$=[];
                                                    this.$.push($$[$0-1]);
                                                
break;
case 52: case 54: case 55: case 57:

                                    this.$=[];
                                    this.$.push($$[$0]);
                                    
break;
case 53:

                                    this.$=[];
                                    this.$.push($$[$0]);
                                
break;
case 56:

                                this.$=[];
                                this.$.push($$[$0]);
                                
break;
case 58:

                                            this.$=[];
                                            this.$.push($$[$0-1]);
                                           
break;
case 59:

                                    this.$=[];
                                    this.$.push($$[$0-1]);
                                
break;
case 61: case 62: case 63:

                                        this.$=[];
                                        this.$.push($$[$0-1]);
                                        
break;
case 64: case 171: case 172:
this.$=new AccesoObjetos($$[$0-2],$$[$0]);
break;
case 65:

                                        this.$=new AsignacionObjetos($$[$0-4],$$[$0-2],$$[$0]);
                                    
break;
case 66:
this.$=new AsignacionArreglos($$[$0-3],$$[$0],$$[$0-2]);
break;
case 67:

                                    this.$=new DeclaracionArreglos($$[$0-1],$$[$0-2],[],$$[$0].length,0,0);
                                
break;
case 68:

                                this.$=new DeclaracionArreglos($$[$0-1],$$[$0-2],[],$$[$0].length,0,0);
                                
break;
case 69:

                                                        this.$=new DeclaracionArreglos($$[$0-5],$$[$0-6],[],$$[$0-4].length,0,0);
                                                        this.$.inicializado=true;
                                                        this.$.lista_dimensiones=$$[$0];
                                                        this.$.tipo_asignacion=$$[$0-1];
                                                        
break;
case 70:

                                            this.$=new DeclaracionArreglos($$[$0-3],$$[$0-4],[],$$[$0-2].length,0,0);
                                            this.$.inicializado=true;
                                            this.$.iniValue=new Aritmetica(null,null,false,$$[$0],null,"ID",0,0);
                                        
break;
case 71:

                                                    this.$=new DeclaracionArreglos($$[$0-5],$$[$0-6],[],$$[$0-4].length,0,0);
                                                    this.$.inicializado=true;
                                                    this.$.lista_dimensiones=$$[$0];
                                                    this.$.tipo_asignacion=$$[$0-1];
                                                    
break;
case 72:

                                        this.$=new DeclaracionArreglos($$[$0-3],$$[$0-4],[],$$[$0-2].length,0,0);
                                        this.$.inicializado=true;
                                        this.$.iniValue=new Aritmetica(null,null,false,$$[$0],null,"ID",0,0);
                                    
break;
case 73:

                        this.$=$$[$0-2];
                        this.$.push(1);
                        
break;
case 74:

                    this.$=[];
                    this.$.push(1);
                
break;
case 75:

                                this.$=$$[$0-3];
                                this.$.push($$[$0-1]);
                                
break;
case 76:

                    this.$=[];
                    this.$.push($$[$0-1]);
                    
break;
case 77:
this.$=new Retorno($$[$0]);
break;
case 78:
this.$=new Retorno(null);
break;
case 79:

                            this.$=new Llamada_Metodo($$[$0-2],[]);
                            
break;
case 80:

                                            this.$=new Llamada_Metodo($$[$0-3],$$[$0-1]);
                                            
break;
case 81:

                                var temp=new Aritmetica(null,null,false,$$[$0-2],null,Type.ID,0,0);
                                this.$=new Aritmetica(temp,null,true,null,"--",null,0,0);
                                
break;
case 82:

                                    var temp=new Aritmetica(null,null,false,$$[$0-2],null,Type.ID,0,0);
                                    this.$=new Aritmetica(temp,null,true,null,"++",null,0,0);
                                
break;
case 83:

                                    var temp=new Aritmetica(null,null,false,$$[$0-1],null,Type.ID,0,0);
                                    this.$=new Aritmetica(temp,null,true,null,"--",null,0,0);
                                    
break;
case 84:

                                    var temp=new Aritmetica(null,null,false,$$[$0-1],null,Type.ID,0,0);
                                    this.$=new Aritmetica(temp,null,true,null,"++",null,0,0);
                                    
break;
case 85:
this.$=new Detener($$[$0]);
break;
case 86:

                                this.$=new Asignacion($$[$0-2],$$[$0],0);
                                
break;
case 87:

                                                    //id,iniValue,dimensiones
                                                    var temp_this=new Este($$[$0-2]);
                                                    this.$=new Asignacion(temp_this,$$[$0],0);
                                                    
break;
case 88:

                                                this.$=$$[$0-2];
                                                this.$.push($$[$0]);
                                                
break;
case 89:

                                this.$=[];
                                this.$.push($$[$0]);
                            
break;
case 90:
this.$=new Aritmetica(null,null,false,$$[$0],null,Type.ID,0,0);;
break;
case 91:

                                        this.$=new Llamada_Metodo($$[$0-3],$$[$0-1]);
                                    
break;
case 92:
this.$=new Llamada_Metodo($$[$0-2],[]);
break;
case 93:

                                                                    this.$=new Selecciona($$[$0-5],$$[$0-2],$$[$0-1]);
                                                                    
break;
case 94:

                                                            this.$=new Selecciona($$[$0-4],$$[$0-1],null);
                                                        
break;
case 95:

                                        this.$=$$[$0-1];
                                        this.$.push($$[$0]);
                                    
break;
case 96: case 123:

                        this.$=[];
                        this.$.push($$[$0]);
                        
break;
case 97:

                                        this.$=new Caso($$[$0-2],$$[$0]);
                                        
break;
case 98:

                                        this.$=new Caso(null,$$[$0]);
                                        
break;
case 99:
this.$=new Mientras($$[$0-4],$$[$0-1],true);
break;
case 100:

                                                                            //es un for normal  
                                                                            //inicializado,condicion,aumento,nodos
                                                                            this.$=new Para($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],true);
                                                                            
break;
case 101:

                                                                    //aqui se va a realizar el foreach
                                                                    
break;
case 104:
this.$=new Mientras($$[$0-2],$$[$0-7],false);
break;
case 105:

                                                                                    //condicion,nodos,subifs,defecto
                                                                                    this.$=new Si($$[$0-6],$$[$0-3],$$[$0-1],$$[$0]);
                                                                                    
break;
case 106:

                                                                    //condicion,nodos,subifs,defecto
                                                                    this.$=new Si($$[$0-5],$$[$0-2],$$[$0],null);
                                                                    
break;
case 107:

                                                                //condicion,nodos,subifs,defecto
                                                                this.$=new Si($$[$0-5],$$[$0-2],[],$$[$0]);
                                                                
break;
case 108:

                                                    //condicion,nodos,subifs,defecto
                                                    this.$=new Si($$[$0-4],$$[$0-1],[],null);
                                                    
break;
case 109:

                                            this.$=new Subsi(null,$$[$0-1]);
                                        
break;
case 110:

                                                                            this.$=$$[$0-8];
                                                                            this.$.push(new Subsi($$[$0-4],$$[$0-1]));
                                                                            
break;
case 111:

                                                            this.$=[];
                                                            this.$.push(new Subsi($$[$0-4],$$[$0-1]));
                                                            
break;
case 112:

                                        this.$=new Imprimir($$[$0-2],false);
                                        
break;
case 113:

                                            this.$=new Imprimir($$[$0-2],true);
                                            
break;
case 117:

                        this.$=[];
                        this.$.push($$[$0]);
                       
break;
case 118: case 119:
this.$=new Declaracion($$[$0],$$[$0-1],null,[],0,0,0);
break;
case 120: case 121:
this.$=new DeclaracionArreglos($$[$0-1],$$[$0-2],[],$$[$0].length,0,0);
break;
case 122:

                                        this.$=$$[$0-1];
                                        this.$.push($$[$0]);
                                        
break;
case 131:
this.$=PrimitiveType.INTEGER;
break;
case 132:
this.$=PrimitiveType.STRING;
break;
case 133:
this.$=PrimitiveType.DOUBLE;
break;
case 134:
this.$=PrimitiveType.CHAR;
break;
case 135:
this.$=PrimitiveType.BOOLEAN;
break;
case 136:
this.$=PrimitiveType.VOID;
break;
case 137:

            this.$=new Logica($$[$0],null,true,null,"!",null,0,0);
        
break;
case 138:

            this.$=new Logica($$[$0-2],$$[$0],false,null,"&&",0,0);
        
break;
case 139:

            this.$=new Logica($$[$0-2],$$[$0],false,null,"||",0,0);
        
break;
case 140:

            this.$=new Logica($$[$0-2],$$[$0],false,null,"^",0,0);
        
break;
case 141:

            this.$=new Relacional($$[$0-2],$$[$0],false,null,">",0,0);
        
break;
case 142:

            this.$=new Relacional($$[$0-2],$$[$0],false,null,"<",0,0);
        
break;
case 143:

            this.$=new Relacional($$[$0-2],$$[$0],false,null,">=",0,0);
        
break;
case 144:

            this.$=new Relacional($$[$0-2],$$[$0],false,null,"<=",0,0);
        
break;
case 145:

            this.$=new Relacional($$[$0-2],$$[$0],false,null,"==",0,0);
        
break;
case 146:

            this.$=new Relacional($$[$0-2],$$[$0],false,null,"!=",0,0);
        
break;
case 147:

            this.$=new Aritmetica($$[$0-2],$$[$0],false,null,"+",null,0,0);
        
break;
case 148:

            this.$=new Aritmetica($$[$0-2],$$[$0],false,null,"-",null,0,0);
        
break;
case 149:

            this.$=new Aritmetica($$[$0-2],$$[$0],false,null,"*",null,0,0);
        
break;
case 150:

            this.$=new Aritmetica($$[$0-2],$$[$0],false,null,"/",null,0,0);
        
break;
case 151:

            this.$=new Aritmetica($$[$0-3],$$[$0-1],false,null,"^",null,0,0);
        
break;
case 152:

            this.$=new Aritmetica($$[$0-2],$$[$0],false,null,"%",null,0,0);
        
break;
case 153:

                    this.$ = $$[$0-1];
                 
break;
case 154:

                this.$=new Aritmetica($$[$0],null,true,null,"-",null,0,0);
             
break;
case 155:

                var temp=new Aritmetica(null,null,false,$$[$0-1],null,Type.ID,0,0);
                this.$=new Aritmetica(temp,null,true,null,"--",null,0,0);
                
break;
case 156:

                var temp=new Aritmetica(null,null,false,$$[$0-1],null,Type.ID,0,0);
                this.$=new Aritmetica(temp,null,true,null,"++",null,0,0);
                
break;
case 157:

                var temp=new Aritmetica(null,null,false,$$[$0],null,Type.ID,0,0);
                this.$=new Aritmetica(temp,null,true,null,"--",null,0,0);
                
break;
case 158:

                var temp=new Aritmetica(null,null,false,$$[$0],null,Type.ID,0,0);
                this.$=new Aritmetica(temp,null,true,null,"++",null,0,0);
                
break;
case 159:

            this.$=new Aritmetica(null,null,false,Number(yytext),null,PrimitiveType.INTEGER,0,0);
        
break;
case 160:

            this.$=new Aritmetica(null,null,false,Number(yytext),null,PrimitiveType.DOUBLE,0,0);
        
break;
case 161:

            this.$=new Aritmetica(null,null,false,yytext,null,PrimitiveType.STRING,0,0);
        
break;
case 162:

            this.$=new Aritmetica(null,null,false,"false",null,PrimitiveType.BOOLEAN,0,0);
        
break;
case 163:

            this.$=new Aritmetica(null,null,false,"true",null,PrimitiveType.BOOLEAN,0,0);
        
break;
case 164:

            this.$=new Aritmetica(null,null,false,yytext,null,PrimitiveType.CHAR,0,0);
        
break;
case 165:

            this.$=new Aritmetica(null,null,false,yytext,null,Type.ID,0,0);
        
break;
case 167:

                                        //id,iniValue,dimensiones
                                        this.$=new Este($$[$0]);
                                    
break;
case 169:
this.$=new Aritmetica(null,null,false,"null",null,PrimitiveType.NULO,0,0);
break;
case 170:

                this.$=new Aritmetica(null,null,false,$$[$0-1],null,"ARRAY",0,0);
                this.$.lista_dimensiones=$$[$0];
            
break;
case 173:
this.$=new Ternario($$[$0-4],$$[$0-2],$$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,13:7,14:9,15:10,16:$V1,22:11,23:12,24:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7},{1:[3]},{5:[1,19]},{5:[2,2]},{8:20,9:21,10:$V0,13:7,14:9,15:10,16:$V1,22:11,23:12,24:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7},{5:[2,4]},o($V8,[2,6]),{5:[2,8],14:22,15:10,16:$V1,22:11,23:12,24:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7},{11:[1,23]},o($V9,[2,10]),{16:[1,24]},{16:[2,14],23:25,24:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7},o($Va,[2,16]),o($Va,[2,17]),o($Va,[2,18]),o($Va,[2,19]),o($Va,[2,20]),o($Va,[2,21]),o($Va,[2,22]),{1:[2,1]},{5:[2,3]},o($V8,[2,5]),o($V9,[2,9]),{12:[1,26]},{17:[1,27]},o($Va,[2,15]),o($V8,[2,7]),{18:[1,28],21:[1,29]},{11:$Vb,17:$Vc,19:30,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vi,30:31,31:32,32:33,33:34,34:35,35:40,36:39,37:37,93:36,94:44,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{17:[1,54]},{11:$Vb,17:$Vc,20:[1,55],24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vi,30:56,31:32,32:33,33:34,34:35,35:40,36:39,37:37,93:36,94:44,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},o($Vo,[2,24]),{11:$Vb,17:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vi,32:57,35:60,36:59,37:37,93:58,94:44,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},o($Vo,[2,26]),o($Vo,[2,27]),o($Vo,[2,28]),o($Vp,[2,123]),{17:[1,61],38:62},{17:[1,63],38:65,42:[1,64]},{12:[1,66]},{12:[1,67]},o($Vp,[2,124]),o($Vp,[2,125]),o($Vp,[2,126]),o($Vp,[2,127]),o($Vq,[2,131]),o($Vq,[2,132]),o($Vq,[2,133]),o($Vq,[2,134]),o($Vq,[2,135]),o($Vq,[2,136]),o($Vp,[2,128]),o($Vp,[2,129]),o($Vp,[2,130]),{18:[1,68]},o($V9,[2,11]),o($Vo,[2,23]),o($Vo,[2,25]),o($Vp,[2,122]),{12:[1,69]},{12:[1,70]},o($Vr,$Vs,{64:72,42:[1,71],65:$Vt}),o($Vu,[2,33],{39:[1,74],45:$Vv}),o($Vr,$Vs,{64:77,42:[1,76],65:$Vt}),{11:$Vb,17:$Vw,37:81,43:$Vx,46:78,91:79,92:80,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},o($Vu,[2,34],{39:[1,83],45:$Vv}),o($Vo,[2,32]),o($Vo,[2,30]),{11:$Vb,17:$Vc,19:84,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vi,30:31,31:32,32:33,33:34,34:35,35:40,36:39,37:37,93:36,94:44,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},o($Vo,[2,31]),o($Vo,[2,29]),{11:$Vb,17:$Vw,37:81,43:$Vx,46:85,91:79,92:80,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{12:[2,67],39:[1,86],65:$Vy},{66:[1,88]},{11:$Vz,17:$VA,40:89,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{17:[1,107]},{11:$Vb,17:$Vw,37:81,43:$Vx,46:108,91:79,92:80,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{12:[2,68],39:[1,109],65:$Vy},{43:[1,110]},{43:[2,115],45:[1,111]},o($VO,[2,117]),{17:[1,112]},{17:[1,113]},{41:[1,114]},{11:$Vb,17:$Vc,20:[1,115],24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vi,30:56,31:32,32:33,33:34,34:35,35:40,36:39,37:37,93:36,94:44,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{43:[1,116]},{17:[1,118],41:[1,117]},{66:[1,119]},o($VP,[2,74]),o($Vu,[2,35],{101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21}),{11:$Vz,17:$VA,40:135,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{42:[1,136]},{11:$Vz,17:$VA,40:137,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:138,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},o($V31,[2,165],{63:141,42:$V41,62:[1,142],65:$V51,68:[1,139],69:[1,140]}),{17:[1,145]},{17:[1,146]},o($V31,[2,159]),o($V31,[2,160]),o($V31,[2,161]),o($V31,[2,162]),o($V31,[2,163]),o($V31,[2,164]),o($V31,[2,166]),{62:[1,147]},o($V31,[2,168]),o($V31,[2,169]),o($V61,[2,40]),{43:[1,148]},{17:[1,150],41:[1,149]},{18:[1,151]},{11:$Vb,17:$Vw,37:81,92:152,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},o($VO,[2,118],{64:153,65:$Vt}),o($VO,[2,119],{64:154,65:$Vt}),{17:[1,155]},o($V9,[2,12]),{12:[1,157],18:[1,156]},{11:$Vb,37:158,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{12:[2,70]},o($VP,[2,73]),{11:$Vz,17:$VA,40:159,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:160,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:161,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:162,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:163,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:164,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:165,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:166,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:167,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:168,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:169,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:170,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:171,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:172,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:173,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},o($V71,[2,137],{101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY}),{11:$Vz,17:$VA,40:174,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{43:[1,175],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},o($V81,[2,154],{101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,112:$V$,113:$V01,115:$V11}),o($V31,[2,155]),o($V31,[2,156]),o($V31,[2,170],{65:$V91}),{17:[1,178],59:177},{11:$Vz,17:$VA,40:181,42:$VB,43:[1,179],44:180,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:182,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},o($V31,[2,157]),o($V31,[2,158]),{17:$Va1,72:183,73:184},{12:[1,186],18:[1,187]},{17:[1,188]},{12:[2,72]},{11:$Vb,17:$Vb1,18:$Vc1,35:192,36:191,37:206,47:189,48:190,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},o($VO,[2,116]),o($VO,[2,120],{65:$Vy}),o($VO,[2,121],{65:$Vy}),{42:[1,220]},{11:$Vb,17:$Vb1,18:$Vc1,35:192,36:191,37:206,47:221,48:190,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},o($Vo,[2,43]),{63:222,65:$V51},o($Vo1,[2,138],{104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY}),o($Vo1,[2,139],{104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY}),o($Vo1,[2,140],{104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY}),o($V31,[2,141]),o($V31,[2,142]),o($V31,[2,143]),o($V31,[2,144]),o($V31,[2,145]),o($V31,[2,146]),o($V81,[2,147],{101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,112:$V$,113:$V01,115:$V11}),o($V81,[2,148],{101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,112:$V$,113:$V01,115:$V11}),o($V71,[2,149],{101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY}),o($V71,[2,150],{101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY}),o($V71,[2,152],{101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY}),{79:[1,223],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},{45:[1,224],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},o($V31,[2,153]),{11:$Vz,17:$VA,40:225,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},o($V31,[2,171]),o($V31,[2,172],{42:$V41}),o($V31,[2,79]),{43:[1,226],45:$Vp1},o($VO,[2,39],{101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21}),{66:[1,228],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},o($V31,[2,167],{62:$Vq1}),o($Vr1,[2,89]),o($Vr1,[2,90],{42:[1,230]}),o($Vo,[2,44]),{11:$Vb,17:$Vb1,18:$Vc1,35:192,36:191,37:206,47:231,48:190,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{63:232,65:$V51},{11:$Vb,17:$Vb1,18:$Vc1,20:[1,233],35:192,36:191,37:206,48:234,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},o($Vs1,[2,48]),{12:[1,235]},{12:[1,236]},{12:[1,237]},o($Vs1,[2,52]),o($Vs1,[2,53]),o($Vs1,[2,54]),o($Vs1,[2,55]),o($Vs1,[2,56]),o($Vs1,[2,57]),{12:[1,238]},{12:[1,239]},o($Vs1,[2,60]),{12:[1,240]},{12:[1,241]},{12:[1,242]},{17:[1,243],38:62},{17:[1,244],38:65,39:$Vt1,42:$V41,62:[1,249],63:245,65:$V51,68:[1,247],69:[1,248]},{42:[1,250]},{42:[1,251]},{42:[1,252]},{42:[1,253]},{42:[1,254]},{42:[1,255]},{11:$Vb,17:$Vb1,18:$Vc1,35:192,36:191,37:206,47:256,48:190,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{62:[1,257]},{12:[2,85]},{17:[1,258]},{17:[1,259]},{11:$Vz,12:[2,78],17:$VA,40:260,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:181,42:$VB,43:[1,261],44:262,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vb,17:$Vb1,18:$Vc1,20:[1,263],35:192,36:191,37:206,48:234,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{12:[2,69],65:$V91},{11:$Vz,17:$VA,40:264,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:265,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{66:[1,266],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},o($V31,[2,80]),{11:$Vz,17:$VA,40:267,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},o($Vu1,[2,76]),{17:$Va1,73:268},{11:$Vz,17:$VA,40:181,42:$VB,43:[1,270],44:269,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vb,17:$Vb1,18:$Vc1,20:[1,271],35:192,36:191,37:206,48:234,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{12:[2,71],65:$V91},o($Vo,[2,46]),o($Vs1,[2,47]),o($Vs1,[2,49]),o($Vs1,[2,50]),o($Vs1,[2,51]),o($Vs1,[2,58]),o($Vs1,[2,59]),o($Vs1,[2,61]),o($Vs1,[2,62]),o($Vs1,[2,63]),o($Vr,$Vs,{64:72,65:$Vt}),o($Vr,$Vs,{64:77,65:$Vt}),{39:[1,272],65:$V91},{11:$Vz,17:$VA,40:273,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{12:[1,274]},{12:[1,275]},{17:[1,277],59:276},{11:$Vz,17:$VA,40:278,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:279,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:280,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:281,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:282,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vb,17:[1,287],36:284,37:286,56:285,71:$Vh1,83:283,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{11:$Vb,17:$Vb1,18:$Vc1,20:[1,288],35:192,36:191,37:206,48:234,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{17:$Va1,72:289,73:184},{12:[1,290]},{12:[1,291]},{12:[2,77],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},o($Vu,[2,36]),{43:[1,292],45:$Vp1},o($Vo,[2,42]),o([12,43,45,66,79,122],[2,173],{101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11}),{43:[1,293],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},o($Vu1,[2,75]),o($VO,[2,38],{101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21}),o($Vr1,[2,88]),{43:[1,294],45:$Vp1},o($Vr1,[2,92]),o($Vo,[2,45]),{11:$Vz,17:$VA,40:295,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},o($Vu,[2,86],{101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21}),o($Vs1,[2,81]),o($Vs1,[2,82]),{12:[2,64]},{39:[1,296],42:$V41},{43:[1,297],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},{43:[1,298],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},{43:[1,299],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},{43:[1,300],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},{43:[1,301],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},{12:[1,302],79:[1,303]},o($Vu,[2,102]),o($Vu,[2,103]),{17:$Vv1,38:62},{17:$Vv1,38:65,39:$Vt1},{84:[1,305]},{39:[1,306],62:$Vq1},o($Vs1,[2,83]),o($Vs1,[2,84]),o($Vu,[2,37]),o($V31,[2,151]),o($Vr1,[2,91]),{12:[2,66],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},{11:$Vz,17:$VA,40:307,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{12:[1,308]},{12:[1,309]},{18:[1,310]},{18:[1,311]},{18:[1,312]},{11:$Vz,17:$VA,40:313,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vz,17:$VA,40:314,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},o($V61,$Vs),{81:[1,315]},{11:$Vz,17:$VA,40:316,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{12:[2,65],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},o($Vs1,[2,112]),o($Vs1,[2,113]),{11:$Vb,17:$Vb1,18:$Vc1,35:192,36:191,37:206,47:317,48:190,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{75:318,77:319,78:$Vw1},{11:$Vb,17:$Vb1,18:$Vc1,35:192,36:191,37:206,47:321,48:190,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{12:[1,322],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},{43:[1,323],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},{42:[1,324]},o($Vu,[2,87],{101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21}),{11:$Vb,17:$Vb1,18:$Vc1,20:[1,325],35:192,36:191,37:206,48:234,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{20:[1,327],76:326,77:328,78:$Vw1,80:[1,329]},o($Vx1,[2,96]),{11:$Vz,17:$VA,40:330,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vb,17:$Vb1,18:$Vc1,20:[1,331],35:192,36:191,37:206,48:234,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{11:$Vz,17:$VA,40:332,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{18:[1,333]},{11:$Vz,17:$VA,40:334,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},o($Vs1,[2,108],{86:335,87:336,88:[1,337]}),{20:[1,338]},o($Vs1,[2,94]),o($Vx1,[2,95]),{79:[1,339]},{79:[1,340],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},o($Vs1,[2,99]),{43:[1,341],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},{11:$Vb,17:$Vb1,18:$Vc1,35:192,36:191,37:206,47:342,48:190,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{43:[1,343],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},o($Vs1,[2,106],{87:344,88:[1,345]}),o($Vs1,[2,107]),{18:$Vy1,85:[1,346]},o($Vs1,[2,93]),{11:$Vb,17:$Vb1,18:$Vc1,35:192,36:191,37:206,47:348,48:190,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{11:$Vb,17:$Vb1,18:$Vc1,35:192,36:191,37:206,47:349,48:190,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{18:[1,350]},{11:$Vb,17:$Vb1,18:$Vc1,20:[1,351],35:192,36:191,37:206,48:234,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{12:[1,352]},o($Vs1,[2,105]),{18:$Vy1,85:[1,353]},{42:[1,354]},{11:$Vb,17:$Vb1,18:$Vc1,35:192,36:191,37:206,47:355,48:190,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{11:$Vb,17:$Vb1,18:$Vc1,20:[2,98],35:192,36:191,37:206,48:234,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},o($Vx1,[2,97],{36:191,35:192,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,37:206,48:234,11:$Vb,17:$Vb1,18:$Vc1,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn}),{11:$Vb,17:$Vb1,18:$Vc1,35:192,36:191,37:206,47:356,48:190,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},o($Vs1,[2,101]),o($Vs1,[2,104]),{42:[1,357]},{11:$Vz,17:$VA,40:358,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{11:$Vb,17:$Vb1,18:$Vc1,20:[1,359],35:192,36:191,37:206,48:234,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{11:$Vb,17:$Vb1,18:$Vc1,20:[1,360],35:192,36:191,37:206,48:234,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{11:$Vz,17:$VA,40:361,42:$VB,59:105,68:$VC,69:$VD,71:$VE,97:$VF,100:$VG,111:$VH,114:$VI,116:$VJ,117:$VK,118:$VL,119:$VM,120:103,121:$VN},{43:[1,362],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},o($Vs1,[2,109]),o($Vs1,[2,100]),{43:[1,363],101:$VQ,102:$VR,103:$VS,104:$VT,105:$VU,106:$VV,107:$VW,108:$VX,109:$VY,110:$VZ,111:$V_,112:$V$,113:$V01,115:$V11,122:$V21},{18:[1,364]},{18:[1,365]},{11:$Vb,17:$Vb1,18:$Vc1,35:192,36:191,37:206,47:366,48:190,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{11:$Vb,17:$Vb1,18:$Vc1,35:192,36:191,37:206,47:367,48:190,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{11:$Vb,17:$Vb1,18:$Vc1,20:[1,368],35:192,36:191,37:206,48:234,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},{11:$Vb,17:$Vb1,18:$Vc1,20:[1,369],35:192,36:191,37:206,48:234,49:193,50:194,51:195,52:196,53:197,54:198,55:199,56:200,57:201,58:202,59:203,60:204,61:205,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,74:$Vi1,81:$Vj1,82:$Vk1,85:$Vl1,89:$Vm1,90:$Vn1,95:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn},o($Vz1,[2,111]),o($Vz1,[2,110])],
defaultActions: {3:[2,2],5:[2,4],19:[2,1],20:[2,3],118:[2,70],150:[2,72],216:[2,85],276:[2,64]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function yyerror(s,linea,columna){
    var error_1=new Errores("Sintactico",s,linea,columna);
    lista_errores.push(error_1);
}
//yyerror(hash.token,hash.line,hash.loc.first_column);/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 'VARIABLE'
break;
case 2:return 'METODO'
break;
case 3:return 'CONSTRUCTOR'
break;
case 4:return 95
break;
case 5:return 11
break;
case 6:return 96
break;
case 7:return 97
break;
case 8:return 98
break;
case 9:return 99
break;
case 10:return 24
break;
case 11:return 28
break;
case 12:return 29
break;
case 13:return 26
break;
case 14:return 25
break;
case 15:return 27
break;
case 16:return 41
break;
case 17:return 16
break;
case 18:return 21
break;
case 19:return 10
break;
case 20:return 90
break;
case 21:return 89
break;
case 22:return 41
break;
case 23:return 71
break;
case 24:return 67
break;
case 25:return 121
break;
case 26:return 85
break;
case 27:return 88
break;
case 28:return 74
break;
case 29:return 78
break;
case 30:return 84
break;
case 31:return 81
break;
case 32:return 82
break;
case 33:return 80
break;
case 34:return 70
break;
case 35:return 62
break;
case 36:return 18
break;
case 37:return 20
break;
case 38:return 45
break;
case 39:return 66
break;
case 40:return 65
break;
case 41:return 79
break;
case 42:return 12
break;
case 43:return 108
break;
case 44:return 39
break;
case 45:return 112
break;
case 46:return 113
break;
case 47:return 69
break;
case 48:return 68
break;
case 49:return 111
break;
case 50:return 110
break;
case 51:return 114
break;
case 52:return 103
break;
case 53:return 109
break;
case 54:return 115
break;
case 55:return 122
break;
case 56:return 107
break;
case 57:return 106
break;
case 58:return 104
break;
case 59:return 105
break;
case 60:return 101
break;
case 61:return 102
break;
case 62:return 100
break;
case 63:return 42
break;
case 64:return 43
break;
case 65:return 119
break;
case 66:return 118
break;
case 67:return 117
break;
case 68:return 116
break;
case 69:return 11
break;
case 70:return 97
break;
case 71:return 17
break;
case 72:return 5
break;
case 73:lista_errores.push(new Errores("LEXICO","TOKEN NO RECONOCIDO "+yy_.yytext,(yy_.yylineno+1),yy_.yyleng));
break;
}
},
rules: [/^(?:\s+)/,/^(?:variable\b)/,/^(?:metodo\b)/,/^(?:constructor\b)/,/^(?:int\b)/,/^(?:string\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:public\b)/,/^(?:static\b)/,/^(?:final\b)/,/^(?:private\b)/,/^(?:protected\b)/,/^(?:abstract\b)/,/^(?:new\b)/,/^(?:class\b)/,/^(?:extends\b)/,/^(?:import\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:new\b)/,/^(?:this\b)/,/^(?:return\b)/,/^(?:null\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:\.)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\])/,/^(?:\[)/,/^(?::)/,/^(?:;)/,/^(?:==)/,/^(?:=)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:pow\b)/,/^(?:\^)/,/^(?:!=)/,/^(?:%)/,/^(?:\?)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+)/,/^(?:"[^\"\n]*")/,/^(?:'[a-zA-Z][^''\n]*')/,/^(?:([a-zA-Z]|["_"])([a-zA-Z]|[0-9]|["_"])*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = calculadora;
exports.Parser = calculadora.Parser;
exports.parse = function () { return calculadora.parse.apply(calculadora, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}