/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var calculadora = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,13],$V1=[1,12],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[11,17,25,26,27,28,29,30],$V8=[5,17,25,26,27,28,29,30],$V9=[17,25,26,27,28,29,30],$Va=[1,44],$Vb=[1,37],$Vc=[1,49],$Vd=[1,51],$Ve=[1,50],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[1,43],$Vj=[1,45],$Vk=[1,46],$Vl=[1,47],$Vm=[1,48],$Vn=[12,18,21,25,26,27,28,29,30,50,51,52,53,54],$Vo=[12,18,25,26,27,28,29,30,50,51,52,53,54],$Vp=[13,38,40],$Vq=[2,35],$Vr=[1,67],$Vs=[1,73],$Vt=[2,44],$Vu=[1,85],$Vv=[1,89],$Vw=[1,81],$Vx=[1,88],$Vy=[1,79],$Vz=[1,82],$VA=[1,80],$VB=[1,83],$VC=[1,84],$VD=[1,86],$VE=[1,87],$VF=[40,43],$VG=[1,100],$VH=[1,101],$VI=[1,102],$VJ=[1,103],$VK=[1,104],$VL=[1,105],$VM=[1,106],$VN=[1,107],$VO=[1,108],$VP=[1,109],$VQ=[1,110],$VR=[1,111],$VS=[1,112],$VT=[13,40,43,56,57,58,59,60,61,62,63,64,65,66,67,69],$VU=[13,40,43,58,59,60,61,62,63,64,65,66,67,69],$VV=[13,40,43,64,65],$VW=[1,144],$VX=[13,40,43,64,65,66,67,69],$VY=[12,18,21,50,51,52,53,54],$VZ=[1,150];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"e":4,"EOF":5,"sentencias_globales":6,"declaraciones_import":7,"sentencias_generales":8,"declaracion_import":9,"declaracion_impor":10,"IMPORT":11,"STRING":12,";":13,"declaraciones_clase":14,"declaracion_clase":15,"modificadores_clase":16,"CLASS":17,"ID":18,"{":19,"cuerpo_clase":20,"}":21,"EXTENDS":22,"modificadores_clase2":23,"modificador_clase":24,"PUBLIC":25,"PROTECTED":26,"PRIVATE":27,"ABSTRACT":28,"STATIC":29,"FINAL":30,"cuerpo_clase_sentencias":31,"modificadores":32,"declaracion_metodos":33,"declaracion_variables":34,"variables":35,"tipo":36,"lista_id":37,"=":38,"exp":39,",":40,"(":41,"lista_parametros":42,")":43,"cuerpo_metodo":44,"sentencias_metodo":45,"parametros":46,"parametro":47,"modificador":48,"visibilidad":49,"INT":50,"DOUBLE":51,"CHAR":52,"BOOLEAN":53,"VOID":54,"!":55,"&&":56,"||":57,">":58,"<":59,">=":60,"<=":61,"==":62,"!=":63,"+":64,"-":65,"*":66,"/":67,"POW":68,"%":69,"NUMBER":70,"DECIMAL":71,"FALSE":72,"TRUE":73,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"declaracion_impor",11:"IMPORT",12:"STRING",13:";",17:"CLASS",18:"ID",19:"{",21:"}",22:"EXTENDS",25:"PUBLIC",26:"PROTECTED",27:"PRIVATE",28:"ABSTRACT",29:"STATIC",30:"FINAL",38:"=",40:",",41:"(",43:")",50:"INT",51:"DOUBLE",52:"CHAR",53:"BOOLEAN",54:"VOID",55:"!",56:"&&",57:"||",58:">",59:"<",60:">=",61:"<=",62:"==",63:"!=",64:"+",65:"-",66:"*",67:"/",68:"POW",69:"%",70:"NUMBER",71:"DECIMAL",72:"FALSE",73:"TRUE"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,2],[7,1],[9,3],[8,1],[14,2],[14,1],[15,6],[15,8],[16,0],[16,1],[23,2],[23,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[20,2],[20,1],[31,2],[31,1],[31,1],[34,2],[34,1],[35,3],[35,3],[35,5],[35,5],[37,3],[37,1],[33,8],[33,6],[33,6],[33,8],[33,7],[44,2],[44,1],[45,1],[42,0],[42,1],[46,3],[46,1],[47,2],[47,2],[32,2],[32,1],[48,1],[48,1],[48,1],[48,1],[49,1],[49,1],[49,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[39,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,6],[39,3],[39,3],[39,2],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 4: case 8: case 14: case 27: case 43: case 45: case 55:
this.$=$$[$0];
break;
case 3:

                                                            this.$=$$[$0-1];
                                                            for(var i=0;i<$$[$0].length;i++){
                                                                this.$.push($$[$0]);
                                                            }
                                                            
break;
case 9: case 15:

                                                            this.$=$$[$0-1];
                                                            this.$.push($$[$0]);
                                                            
break;
case 10: case 16:

                                        this.$=[];
                                        this.$.push($$[$0]);
                                        
break;
case 11:

                                                                    this.$=new Declaracionclase($$[$0-3],$$[$0-5],"",$$[$0-1]);
                                                                    
break;
case 12:

                                                                                this.$=new Declaracionclase($$[$0-5],$$[$0-7],$$[$0-3],$$[$0-1]);
                                                                                
break;
case 13: case 44:
this.$=[];
break;
case 17: case 56:
this.$=Visibilidad.PUBLIC;
break;
case 18: case 58:
this.$=Visibilidad.PROTECTED;
break;
case 19: case 57:
this.$=Visibilidad.PRIVATE;
break;
case 20: case 52:
this.$=Visibilidad.ABSTRACT;
break;
case 21: case 53:
this.$=Visibilidad.STATIC;
break;
case 22: case 54:
this.$=Visibilidad.FINAL;
break;
case 23:

                                                this.$=$$[$0-1];
                                                for(var i=0;i<$$[$0].length;i++){
                                                    this.$.push($$[$0][i]);
                                                }
                                                
break;
case 24:

                                    this.$=$$[$0];
                                    
break;
case 25:

                                                            this.$=[];
                                                            $$[$0].modificadores=$$[$0-1];
                                                            this.$.push($$[$0]);
                                                        
break;
case 26:

                            this.$=[];
                            this.$.push($$[$0]);
                        
break;
case 28:

                                                for(var i=0;i<$$[$0].length;i++){
                                                    $$[$0][i].modificadores=$$[$0-1];
                                                }
                                                this.$=$$[$0];
                                              
break;
case 29:

                                this.$=$$[$0];
                               
break;
case 30:

                                //DECLARACION DE UNA VARIABLE
                                for(var i=0;i<$$[$0-1].length;i++){
                                    $$[$0-1][i].tipo=$$[$0-2];
                                }
                                this.$=$$[$0-1];
                            
break;
case 31:

                            //DECLARACION DE UN OBJETO
                            for(var i=0;i<$$[$0-1].length;i++){
                                $$[$0-1][i].tipo=$$[$0-2];
                            }
                            this.$=$$[$0-1];
                            
break;
case 32:

                                    //DECLARACION ASIGNACION DE UNA VARIABLE
                                    for(var i=0;i<$$[$0-3].length;i++){
                                        $$[$0-3][i].tipo=$$[$0-4];
                                    }
                                    $$[$0-3][($$[$0-3].length-1)].iniValue=$$[$0-1];
                                    this.$=$$[$0-3];
                                    
break;
case 33:
 
                                    //DECLARACION ASIGNACION DE UN OBJETO
                                    //aca queda normal, en la parte de expresiones tenemos que agregar las declaracion new objeto();
                                    for(var i=0;i<$$[$0-3].length;i++){
                                        $$[$0-3][i].tipo=$$[$0-4];
                                    }
                                    $$[$0-3][($$[$0-3].length-1)].iniValue=$$[$0-1];
                                    this.$=$$[$0-3];
                                    
break;
case 34:

                        this.$=$$[$0-2];
                        this.$.push(new Declaracion(yytext,PrimitiveType.NULO,null,null,0,0,0));
                        
break;
case 35:

            this.$=[];
            this.$.push(new Declaracion(yytext,PrimitiveType.NULO,null,[],0,0,0));
            
break;
case 36:

                                                                            //UN METODO NORMAL
                                                                            this.$=new Metodo($$[$0-6],$$[$0-7],$$[$0-1],$$[$0-4]);
                                                                            
break;
case 37:

                                                        //UN METODO ABSTRACTO NORMAL
                                                        //id,tipo,nodos,parametros
                                                        this.$=new Metodo($$[$0-4],$$[$0-5],[],$$[$0-2]);
                                                        
break;
case 38:

                                                        //UN METODO ABSTRACTO QUE DEVUELVE UN OBJETO
                                                        this.$=new Metodo($$[$0-4],$$[$0-5],[],$$[$0-2]);
                                                        
break;
case 39:

                                                                            //METODO QUE DEVUELVE UN OBJETO
                                                                            this.$=new Metodo($$[$0-6],$$[$0-7],$$[$0-1],$$[$0-4]);
                                                                        
break;
case 40:

                                                                        //CONSTRUCTOR
                                                                        this.$=new Metodo($$[$0-6],"VOID",$$[$0],$$[$0-3]);
                                                                        this.$.constructor=true;
                                                                    
break;
case 41:

                                                this.$=$$[$0-1];
                                                for(var i=0;i<$$[$0].length;i++){
                                                    this.$.push($$[$0][i]);
                                                }
                                            
break;
case 42:

                                this.$=$$[$0];
                                
break;
case 46:

                                    this.$=$$[$0-2];
                                    this.$.push($$[$0]);
                                    
break;
case 47:

                        this.$=[];
                        this.$.push($$[$0]);
                       
break;
case 48: case 49:
this.$=new Declaracion($$[$0],$$[$0-1],null,[],0,0,0);
break;
case 50:

                                        this.$=$$[$0-1];
                                        this.$.push($$[$0]);
                                        
break;
case 51:

                        this.$=[];
                        this.$.push($$[$0]);
                        
break;
case 59:
this.$=PrimitiveType.INTEGER;
break;
case 60:
this.$=PrimitiveType.STRING;
break;
case 61:
this.$=PrimitiveType.DOUBLE;
break;
case 62:
this.$=PrimitiveType.CHAR;
break;
case 63:
this.$=PrimitiveType.BOOLEAN;
break;
case 64:
this.$=PrimitiveType.VOID;
break;
case 65:

            this.$=new Logica($$[$0],null,true,null,"!",null,0,0);
        
break;
case 66:

            this.$=new Logica($$[$0-2],$$[$0],false,null,"&&",0,0);
        
break;
case 67:

            this.$=new Logica($$[$0-2],$$[$0],false,null,"||",0,0);
        
break;
case 68:

            this.$=new Relacional($$[$0-2],$$[$0],false,null,">",0,0);
        
break;
case 69:

            this.$=new Relacional($$[$0-2],$$[$0],false,null,"<",0,0);
        
break;
case 70:

            this.$=new Relacional($$[$0-2],$$[$0],false,null,">=",0,0);
        
break;
case 71:

            this.$=new Relacional($$[$0-2],$$[$0],false,null,"<=",0,0);
        
break;
case 72:

            this.$=new Relacional($$[$0-2],$$[$0],false,null,"==",0,0);
        
break;
case 73:

            this.$=new Relacional($$[$0-2],$$[$0],false,null,"!=",0,0);
        
break;
case 74:

            this.$=new Aritmetica($$[$0-2],$$[$0],false,null,"+",null,0,0);
        
break;
case 75:

            this.$=new Aritmetica($$[$0-2],$$[$0],false,null,"-",null,0,0);
        
break;
case 76:

            this.$=new Aritmetica($$[$0-2],$$[$0],false,null,"*",null,0,0);
        
break;
case 77:

            this.$=new Aritmetica($$[$0-2],$$[$0],false,null,"/",null,0,0);
        
break;
case 78:

            this.$=new Aritmetica($$[$0-3],$$[$0-1],false,null,"^",null,0,0);
        
break;
case 79:

            this.$=new Aritmetica($$[$0-2],$$[$0],false,null,"%",null,0,0);
        
break;
case 80:

                    this.$ = $$[$0-1];
                 
break;
case 81:

                this.$=new Aritmetica($$[$0],null,true,null,"-",null,0,0);
             
break;
case 82:

            this.$=new Aritmetica(null,null,false,Number(yytext),null,PrimitiveType.INTEGER,0,0);
        
break;
case 83:

            this.$=new Aritmetica(null,null,false,Number(yytext),null,PrimitiveType.DOUBLE,0,0);
        
break;
case 84:

            this.$=new Aritmetica(null,null,false,yytext,null,PrimitiveType.STRING,0,0);
        
break;
case 85:

            this.$=new Aritmetica(null,null,false,"false",null,PrimitiveType.BOOLEAN,0,0);
        
break;
case 86:

            this.$=new Aritmetica(null,null,false,"true",null,PrimitiveType.BOOLEAN,0,0);
        
break;
case 87:

            this.$=new Aritmetica(null,null,false,yytext,null,PrimitiveType.CHAR,0,0);
        
break;
case 88:

            this.$=new Aritmetica(null,null,false,yytext,null,Type.ID,0,0);
        
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,10:[1,6],14:7,15:8,16:9,17:$V0,23:10,24:11,25:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6},{1:[3]},{5:[1,18]},{5:[2,2]},{8:19,9:20,11:[1,21],14:7,15:8,16:9,17:$V0,23:10,24:11,25:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6},{5:[2,4]},o($V7,[2,6]),{5:[2,8],15:22,16:9,17:$V0,23:10,24:11,25:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6},o($V8,[2,10]),{17:[1,23]},{17:[2,14],24:24,25:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6},o($V9,[2,16]),o($V9,[2,17]),o($V9,[2,18]),o($V9,[2,19]),o($V9,[2,20]),o($V9,[2,21]),o($V9,[2,22]),{1:[2,1]},{5:[2,3]},o($V7,[2,5]),{12:[1,25]},o($V8,[2,9]),{18:[1,26]},o($V9,[2,15]),{13:[1,27]},{19:[1,28],22:[1,29]},o($V7,[2,7]),{12:$Va,18:$Vb,20:30,25:$Vc,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,31:31,32:32,33:33,34:34,35:38,36:36,48:35,49:42,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm},{18:[1,52]},{12:$Va,18:$Vb,21:[1,53],25:$Vc,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,31:54,32:32,33:33,34:34,35:38,36:36,48:35,49:42,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm},o($Vn,[2,24]),{12:$Va,18:$Vb,25:$Vc,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,33:55,35:57,36:36,48:56,49:42,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm},o($Vn,[2,26]),o($Vn,[2,27]),o($Vo,[2,51]),{18:[1,58],37:59},{18:[1,60],37:62,41:[1,61]},o($Vn,[2,29]),o($Vo,[2,52]),o($Vo,[2,53]),o($Vo,[2,54]),o($Vo,[2,55]),{18:[2,59]},{18:[2,60]},{18:[2,61]},{18:[2,62]},{18:[2,63]},{18:[2,64]},o($Vo,[2,56]),o($Vo,[2,57]),o($Vo,[2,58]),{19:[1,63]},o($V8,[2,11]),o($Vn,[2,23]),o($Vn,[2,25]),o($Vo,[2,50]),o($Vn,[2,28]),o($Vp,$Vq,{41:[1,64]}),{13:[1,65],38:[1,66],40:$Vr},o($Vp,$Vq,{41:[1,68]}),{12:$Va,18:$Vs,36:72,42:69,43:$Vt,46:70,47:71,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm},{13:[1,74],38:[1,75],40:$Vr},{12:$Va,18:$Vb,20:76,25:$Vc,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,31:31,32:32,33:33,34:34,35:38,36:36,48:35,49:42,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm},{12:$Va,18:$Vs,36:72,42:77,43:$Vt,46:70,47:71,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm},o($Vn,[2,30]),{12:$Vu,18:$Vv,39:78,41:$Vw,52:$Vx,55:$Vy,65:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{18:[1,90]},{12:$Va,18:$Vs,36:72,42:91,43:$Vt,46:70,47:71,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm},{43:[1,92]},{40:[1,93],43:[2,45]},o($VF,[2,47]),{18:[1,94]},{18:[1,95]},o($Vn,[2,31]),{12:$Vu,18:$Vv,39:96,41:$Vw,52:$Vx,55:$Vy,65:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{12:$Va,18:$Vb,21:[1,97],25:$Vc,26:$Vd,27:$Ve,28:$Vf,29:$Vg,30:$Vh,31:54,32:32,33:33,34:34,35:38,36:36,48:35,49:42,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm},{43:[1,98]},{13:[1,99],56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS},{12:$Vu,18:$Vv,39:113,41:$Vw,52:$Vx,55:$Vy,65:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{41:[1,114]},{12:$Vu,18:$Vv,39:115,41:$Vw,52:$Vx,55:$Vy,65:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{12:$Vu,18:$Vv,39:116,41:$Vw,52:$Vx,55:$Vy,65:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE},o($VT,[2,82]),o($VT,[2,83]),o($VT,[2,84]),o($VT,[2,85]),o($VT,[2,86]),o($VT,[2,87]),o($VT,[2,88]),o($Vp,[2,34]),{43:[1,117]},{19:[1,118]},{12:$Va,18:$Vs,36:72,47:119,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm},o($VF,[2,48]),o($VF,[2,49]),{13:[1,120],56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS},o($V8,[2,12]),{13:[1,122],19:[1,121]},o($Vn,[2,32]),{12:$Vu,18:$Vv,39:123,41:$Vw,52:$Vx,55:$Vy,65:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{12:$Vu,18:$Vv,39:124,41:$Vw,52:$Vx,55:$Vy,65:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{12:$Vu,18:$Vv,39:125,41:$Vw,52:$Vx,55:$Vy,65:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{12:$Vu,18:$Vv,39:126,41:$Vw,52:$Vx,55:$Vy,65:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{12:$Vu,18:$Vv,39:127,41:$Vw,52:$Vx,55:$Vy,65:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{12:$Vu,18:$Vv,39:128,41:$Vw,52:$Vx,55:$Vy,65:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{12:$Vu,18:$Vv,39:129,41:$Vw,52:$Vx,55:$Vy,65:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{12:$Vu,18:$Vv,39:130,41:$Vw,52:$Vx,55:$Vy,65:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{12:$Vu,18:$Vv,39:131,41:$Vw,52:$Vx,55:$Vy,65:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{12:$Vu,18:$Vv,39:132,41:$Vw,52:$Vx,55:$Vy,65:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{12:$Vu,18:$Vv,39:133,41:$Vw,52:$Vx,55:$Vy,65:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{12:$Vu,18:$Vv,39:134,41:$Vw,52:$Vx,55:$Vy,65:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{12:$Vu,18:$Vv,39:135,41:$Vw,52:$Vx,55:$Vy,65:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE},o($VU,[2,65],{56:$VG,57:$VH}),{12:$Vu,18:$Vv,39:136,41:$Vw,52:$Vx,55:$Vy,65:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{43:[1,137],56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS},o($VV,[2,81],{56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,66:$VQ,67:$VR,69:$VS}),{13:[1,138],19:[1,139]},{12:$Va,18:$VW,35:142,36:143,44:140,45:141,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm},o($VF,[2,46]),o($Vn,[2,33]),{12:$Va,18:$VW,35:142,36:143,44:145,45:141,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm},o($Vn,[2,37]),o($VT,[2,66]),o($VT,[2,67]),o($VU,[2,68],{56:$VG,57:$VH}),o($VU,[2,69],{56:$VG,57:$VH}),o($VU,[2,70],{56:$VG,57:$VH}),o($VU,[2,71],{56:$VG,57:$VH}),o($VU,[2,72],{56:$VG,57:$VH}),o($VU,[2,73],{56:$VG,57:$VH}),o($VV,[2,74],{56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,66:$VQ,67:$VR,69:$VS}),o($VV,[2,75],{56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,66:$VQ,67:$VR,69:$VS}),o($VX,[2,76],{56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN}),o($VX,[2,77],{56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN}),o($VX,[2,79],{56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN}),{40:[1,146],56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS},o($VT,[2,80]),o($Vn,[2,38]),{12:$Va,18:$VW,35:142,36:143,44:147,45:141,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm},{12:$Va,18:$VW,21:[1,148],35:142,36:143,45:149,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm},o($VY,[2,42]),o($VY,[2,43]),{18:$VZ,37:59},{18:$VZ,37:62},{12:$Va,18:$VW,21:[1,151],35:142,36:143,45:149,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm},{12:$Vu,18:$Vv,39:152,41:$Vw,52:$Vx,55:$Vy,65:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE},{12:$Va,18:$VW,21:[1,153],35:142,36:143,45:149,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm},o($Vn,[2,40]),o($VY,[2,41]),o($Vp,$Vq),o($Vn,[2,36]),{43:[1,154],56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,65:$VP,66:$VQ,67:$VR,69:$VS},o($Vn,[2,39]),o($VT,[2,78])],
defaultActions: {3:[2,2],5:[2,4],18:[2,1],19:[2,3],43:[2,59],44:[2,60],45:[2,61],46:[2,62],47:[2,63],48:[2,64]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 'VARIABLE'
break;
case 2:return 'METODO'
break;
case 3:return 'CONSTRUCTOR'
break;
case 4:return 50
break;
case 5:return 12
break;
case 6:return 51
break;
case 7:return 52
break;
case 8:return 53
break;
case 9:return 54
break;
case 10:return 25
break;
case 11:return 29
break;
case 12:return 30
break;
case 13:return 27
break;
case 14:return 26
break;
case 15:return 28
break;
case 16:return 'NEW'
break;
case 17:return 17
break;
case 18:return 22
break;
case 19:return 11
break;
case 20:return 19
break;
case 21:return 21
break;
case 22:return 40
break;
case 23:return ']'
break;
case 24:return '['
break;
case 25:return 13
break;
case 26:return 62
break;
case 27:return 38
break;
case 28:return 66
break;
case 29:return 67
break;
case 30:return 65
break;
case 31:return 64
break;
case 32:return 68
break;
case 33:return 63
break;
case 34:return 69
break;
case 35:return 61
break;
case 36:return 60
break;
case 37:return 58
break;
case 38:return 59
break;
case 39:return 56
break;
case 40:return 57
break;
case 41:return 55
break;
case 42:return 41
break;
case 43:return 43
break;
case 44:return 73
break;
case 45:return 72
break;
case 46:return 71
break;
case 47:return 70
break;
case 48:return 12
break;
case 49:return 52
break;
case 50:return 18
break;
case 51:return 5
break;
case 52:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:variable\b)/,/^(?:metodo\b)/,/^(?:constructor\b)/,/^(?:int\b)/,/^(?:string\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:public\b)/,/^(?:static\b)/,/^(?:final\b)/,/^(?:private\b)/,/^(?:protected\b)/,/^(?:abstract\b)/,/^(?:new\b)/,/^(?:class\b)/,/^(?:extends\b)/,/^(?:import\b)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\])/,/^(?:\[)/,/^(?:;)/,/^(?:==)/,/^(?:=)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:pow\b)/,/^(?:!=)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+)/,/^(?:"[^\"\n]*")/,/^(?:'[a-zA-Z][^''\n]*')/,/^(?:([a-zA-Z]|["_"])([a-zA-Z]|[0-9]|["_"])*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = calculadora;
exports.Parser = calculadora.Parser;
exports.parse = function () { return calculadora.parse.apply(calculadora, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}